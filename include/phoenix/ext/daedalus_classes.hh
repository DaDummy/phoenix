// Copyright Â© 2022 Luis Michaelis <lmichaelis.all+dev@gmail.com>
// SPDX-License-Identifier: MIT
#pragma once
#include <phoenix/daedalus/script.hh>

#define var
#define string std::string
#define func int

namespace phoenix::daedalus {
	struct C_GILVALUES {
		var int WATER_DEPTH_KNEE[66];
		var int WATER_DEPTH_CHEST[66];
		var int JUMPUP_HEIGHT[66];
		var int SWIM_TIME[66];
		var int DIVE_TIME[66];
		var int STEP_HEIGHT[66];
		var int JUMPLOW_HEIGHT[66];
		var int JUMPMID_HEIGHT[66];
		var int SLIDE_ANGLE[66];
		var int SLIDE_ANGLE2[66];
		var int DISABLE_AUTOROLL[66];
		var int SURFACE_ALIGN[66];
		var int CLIMB_HEADING_ANGLE[66];
		var int CLIMB_HORIZ_ANGLE[66];
		var int CLIMB_GROUND_ANGLE[66];
		var int FIGHT_RANGE_BASE[66];
		var int FIGHT_RANGE_FIST[66];
		var int FIGHT_RANGE_G[66];
		var int FIGHT_RANGE_1HS[66];
		var int FIGHT_RANGE_1HA[66];
		var int FIGHT_RANGE_2HS[66];
		var int FIGHT_RANGE_2HA[66];
		var int FALLDOWN_HEIGHT[66];
		var int FALLDOWN_DAMAGE[66];
		var int BLOOD_DISABLED[66];
		var int BLOOD_MAX_DISTANCE[66];
		var int BLOOD_AMOUNT[66];
		var int BLOOD_FLOW[66];
		var string BLOOD_EMITTER[66];
		var string BLOOD_TEXTURE[66];
		var int TURN_SPEED[66];

		static void register_(script& s) {
			s.register_member("C_GILVALUES.WATER_DEPTH_KNEE", &C_GILVALUES::WATER_DEPTH_KNEE);
			s.register_member("C_GILVALUES.WATER_DEPTH_CHEST", &C_GILVALUES::WATER_DEPTH_CHEST);
			s.register_member("C_GILVALUES.JUMPUP_HEIGHT", &C_GILVALUES::JUMPUP_HEIGHT);
			s.register_member("C_GILVALUES.SWIM_TIME", &C_GILVALUES::SWIM_TIME);
			s.register_member("C_GILVALUES.DIVE_TIME", &C_GILVALUES::DIVE_TIME);
			s.register_member("C_GILVALUES.STEP_HEIGHT", &C_GILVALUES::STEP_HEIGHT);
			s.register_member("C_GILVALUES.JUMPLOW_HEIGHT", &C_GILVALUES::JUMPLOW_HEIGHT);
			s.register_member("C_GILVALUES.JUMPMID_HEIGHT", &C_GILVALUES::JUMPMID_HEIGHT);
			s.register_member("C_GILVALUES.SLIDE_ANGLE", &C_GILVALUES::SLIDE_ANGLE);
			s.register_member("C_GILVALUES.SLIDE_ANGLE2", &C_GILVALUES::SLIDE_ANGLE2);
			s.register_member("C_GILVALUES.DISABLE_AUTOROLL", &C_GILVALUES::DISABLE_AUTOROLL);
			s.register_member("C_GILVALUES.SURFACE_ALIGN", &C_GILVALUES::SURFACE_ALIGN);
			s.register_member("C_GILVALUES.CLIMB_HEADING_ANGLE", &C_GILVALUES::CLIMB_HEADING_ANGLE);
			s.register_member("C_GILVALUES.CLIMB_HORIZ_ANGLE", &C_GILVALUES::CLIMB_HORIZ_ANGLE);
			s.register_member("C_GILVALUES.CLIMB_GROUND_ANGLE", &C_GILVALUES::CLIMB_GROUND_ANGLE);
			s.register_member("C_GILVALUES.FIGHT_RANGE_BASE", &C_GILVALUES::FIGHT_RANGE_BASE);
			s.register_member("C_GILVALUES.FIGHT_RANGE_FIST", &C_GILVALUES::FIGHT_RANGE_FIST);
			s.register_member("C_GILVALUES.FIGHT_RANGE_1HS", &C_GILVALUES::FIGHT_RANGE_1HS);
			s.register_member("C_GILVALUES.FIGHT_RANGE_1HA", &C_GILVALUES::FIGHT_RANGE_1HA);
			s.register_member("C_GILVALUES.FIGHT_RANGE_2HS", &C_GILVALUES::FIGHT_RANGE_2HS);
			s.register_member("C_GILVALUES.FIGHT_RANGE_2HA", &C_GILVALUES::FIGHT_RANGE_2HA);
			s.register_member("C_GILVALUES.FALLDOWN_HEIGHT", &C_GILVALUES::FALLDOWN_HEIGHT);
			s.register_member("C_GILVALUES.FALLDOWN_DAMAGE", &C_GILVALUES::FALLDOWN_DAMAGE);
			s.register_member("C_GILVALUES.BLOOD_DISABLED", &C_GILVALUES::BLOOD_DISABLED);
			s.register_member("C_GILVALUES.BLOOD_MAX_DISTANCE", &C_GILVALUES::BLOOD_MAX_DISTANCE);
			s.register_member("C_GILVALUES.BLOOD_AMOUNT", &C_GILVALUES::BLOOD_AMOUNT);
			s.register_member("C_GILVALUES.BLOOD_FLOW", &C_GILVALUES::BLOOD_FLOW);
			s.register_member("C_GILVALUES.BLOOD_EMITTER", &C_GILVALUES::BLOOD_EMITTER);
			s.register_member("C_GILVALUES.BLOOD_TEXTURE", &C_GILVALUES::BLOOD_TEXTURE);
			s.register_member("C_GILVALUES.TURN_SPEED", &C_GILVALUES::TURN_SPEED);

			// Gothic 2 only
			if (s.find_symbol_by_name("C_GILVALUES.FIGHT_RANGE_G") != nullptr) {
				s.register_member("C_GILVALUES.FIGHT_RANGE_G", &C_GILVALUES::FIGHT_RANGE_G);
			}
		}
	};

	struct C_NPC {
		var int ID;
		var string NAME[5];
		var string SLOT;
		var string EFFECT;
		var int NPCTYPE;
		var int FLAGS;
		var int ATTRIBUTE[8];
		var int HITCHANCE[5];
		var int PROTECTION[8];
		var int DAMAGE[8];
		var int DAMAGETYPE;
		var int GUILD;
		var int LEVEL;
		var func MISSION[5];
		var int FIGHT_TACTIC;
		var int WEAPON;
		var int VOICE;
		var int VOICEPITCH;
		var int BODYMASS;
		var func DAILY_ROUTINE;
		var func START_AISTATE;
		var string SPAWNPOINT;
		var int SPAWNDELAY;
		var int SENSES;
		var int SENSES_RANGE;
		var int AIVAR[100];
		var string WP;
		var int EXP;
		var int EXP_NEXT;
		var int LP;
		var int BODYSTATEINTERRUPTABLEOVERRIDE;
		var int NOFOCUS;

		static void register_(script& s) {
			s.register_member("C_NPC.ID", &C_NPC::ID);
			s.register_member("C_NPC.NAME", &C_NPC::NAME);
			s.register_member("C_NPC.SLOT", &C_NPC::SLOT);
			s.register_member("C_NPC.NPCTYPE", &C_NPC::NPCTYPE);
			s.register_member("C_NPC.FLAGS", &C_NPC::FLAGS);
			s.register_member("C_NPC.ATTRIBUTE", &C_NPC::ATTRIBUTE);
			s.register_member("C_NPC.PROTECTION", &C_NPC::PROTECTION);
			s.register_member("C_NPC.DAMAGE", &C_NPC::DAMAGE);
			s.register_member("C_NPC.DAMAGETYPE", &C_NPC::DAMAGETYPE);
			s.register_member("C_NPC.GUILD", &C_NPC::GUILD);
			s.register_member("C_NPC.LEVEL", &C_NPC::LEVEL);
			s.register_member("C_NPC.MISSION", &C_NPC::MISSION);
			s.register_member("C_NPC.FIGHT_TACTIC", &C_NPC::FIGHT_TACTIC);
			s.register_member("C_NPC.WEAPON", &C_NPC::WEAPON);
			s.register_member("C_NPC.VOICE", &C_NPC::VOICE);
			s.register_member("C_NPC.VOICEPITCH", &C_NPC::VOICEPITCH);
			s.register_member("C_NPC.BODYMASS", &C_NPC::BODYMASS);
			s.register_member("C_NPC.DAILY_ROUTINE", &C_NPC::DAILY_ROUTINE);
			s.register_member("C_NPC.START_AISTATE", &C_NPC::START_AISTATE);
			s.register_member("C_NPC.SPAWNPOINT", &C_NPC::SPAWNPOINT);
			s.register_member("C_NPC.SPAWNDELAY", &C_NPC::SPAWNDELAY);
			s.register_member("C_NPC.SENSES", &C_NPC::SENSES);
			s.register_member("C_NPC.SENSES_RANGE", &C_NPC::SENSES_RANGE);
			s.register_member("C_NPC.AIVAR", &C_NPC::AIVAR);
			s.register_member("C_NPC.WP", &C_NPC::WP);
			s.register_member("C_NPC.EXP", &C_NPC::EXP);
			s.register_member("C_NPC.EXP_NEXT", &C_NPC::EXP_NEXT);
			s.register_member("C_NPC.LP", &C_NPC::LP);

			// Gothic 2 only
			if (s.find_symbol_by_name("C_NPC.EFFECT") != nullptr) {
				s.register_member("C_NPC.EFFECT", &C_NPC::EFFECT);
				s.register_member("C_NPC.HITCHANCE", &C_NPC::HITCHANCE);
				s.register_member("C_NPC.BODYSTATEINTERRUPTABLEOVERRIDE", &C_NPC::BODYSTATEINTERRUPTABLEOVERRIDE);
				s.register_member("C_NPC.NOFOCUS", &C_NPC::NOFOCUS);
			}
		}
	};

	struct C_MISSION {
		var string NAME;
		var string DESCRIPTION;
		var int DURATION;
		var int IMPORTANT;
		var func OFFERCONDITIONS;
		var func OFFER;
		var func SUCCESSCONDITIONS;
		var func SUCCESS;
		var func FAILURECONDITIONS;
		var func FAILURE;
		var func OBSOLETECONDITIONS;
		var func OBSOLETE;
		var func RUNNING;

		static void register_(script& s) {
			s.register_member("C_MISSION.NAME", &C_MISSION::NAME);
			s.register_member("C_MISSION.DESCRIPTION", &C_MISSION::DESCRIPTION);
			s.register_member("C_MISSION.DURATION", &C_MISSION::DURATION);
			s.register_member("C_MISSION.IMPORTANT", &C_MISSION::IMPORTANT);
			s.register_member("C_MISSION.OFFERCONDITIONS", &C_MISSION::OFFERCONDITIONS);
			s.register_member("C_MISSION.OFFER", &C_MISSION::OFFER);
			s.register_member("C_MISSION.SUCCESSCONDITIONS", &C_MISSION::SUCCESSCONDITIONS);
			s.register_member("C_MISSION.SUCCESS", &C_MISSION::SUCCESS);
			s.register_member("C_MISSION.FAILURECONDITIONS", &C_MISSION::FAILURECONDITIONS);
			s.register_member("C_MISSION.FAILURE", &C_MISSION::FAILURE);
			s.register_member("C_MISSION.OBSOLETECONDITIONS", &C_MISSION::OBSOLETECONDITIONS);
			s.register_member("C_MISSION.OBSOLETE", &C_MISSION::OBSOLETE);
			s.register_member("C_MISSION.RUNNING", &C_MISSION::RUNNING);
		}
	};

	struct C_ITEM {
		var int ID;
		var string NAME;
		var string NAMEID;
		var int HP;
		var int HP_MAX;
		var int MAINFLAG;
		var int FLAGS;
		var int WEIGHT;
		var int VALUE;
		var int DAMAGETYPE;
		var int DAMAGETOTAL;
		var int DAMAGE[8];
		var int WEAR;
		var int PROTECTION[8];
		var int NUTRITION;
		var int COND_ATR[3];
		var int COND_VALUE[3];
		var int CHANGE_ATR[3];
		var int CHANGE_VALUE[3];
		var func MAGIC;
		var func ON_EQUIP;
		var func ON_UNEQUIP;
		var func ON_STATE[4];
		var func OWNER;
		var int OWNERGUILD;
		var int DISGUISEGUILD;
		var string VISUAL;
		var string VISUAL_CHANGE;
		var string EFFECT;
		var int VISUAL_SKIN;
		var string SCEMENAME;
		var int MATERIAL;
		var int MUNITION;
		var int SPELL;
		var int RANGE;
		var int MAG_CIRCLE;
		var string DESCRIPTION;
		var string TEXT[6];
		var int COUNT[6];
		var int INV_ZBIAS;
		var int INV_ROTX;
		var int INV_ROTY;
		var int INV_ROTZ;
		var int INV_ANIMATE;

		static void register_(script& s) {
			s.register_member("C_ITEM.ID", &C_ITEM::ID);
			s.register_member("C_ITEM.NAME", &C_ITEM::NAME);
			s.register_member("C_ITEM.NAMEID", &C_ITEM::NAMEID);
			s.register_member("C_ITEM.HP", &C_ITEM::HP);
			s.register_member("C_ITEM.HP_MAX", &C_ITEM::HP_MAX);
			s.register_member("C_ITEM.MAINFLAG", &C_ITEM::MAINFLAG);
			s.register_member("C_ITEM.FLAGS", &C_ITEM::FLAGS);
			s.register_member("C_ITEM.WEIGHT", &C_ITEM::WEIGHT);
			s.register_member("C_ITEM.VALUE", &C_ITEM::VALUE);
			s.register_member("C_ITEM.DAMAGETYPE", &C_ITEM::DAMAGETYPE);
			s.register_member("C_ITEM.DAMAGETOTAL", &C_ITEM::DAMAGETOTAL);
			s.register_member("C_ITEM.DAMAGE", &C_ITEM::DAMAGE);
			s.register_member("C_ITEM.WEAR", &C_ITEM::WEAR);
			s.register_member("C_ITEM.PROTECTION", &C_ITEM::PROTECTION);
			s.register_member("C_ITEM.NUTRITION", &C_ITEM::NUTRITION);
			s.register_member("C_ITEM.COND_ATR", &C_ITEM::COND_ATR);
			s.register_member("C_ITEM.COND_VALUE", &C_ITEM::COND_VALUE);
			s.register_member("C_ITEM.CHANGE_ATR", &C_ITEM::CHANGE_ATR);
			s.register_member("C_ITEM.CHANGE_VALUE", &C_ITEM::CHANGE_VALUE);
			s.register_member("C_ITEM.MAGIC", &C_ITEM::MAGIC);
			s.register_member("C_ITEM.ON_EQUIP", &C_ITEM::ON_EQUIP);
			s.register_member("C_ITEM.ON_UNEQUIP", &C_ITEM::ON_UNEQUIP);
			s.register_member("C_ITEM.ON_STATE", &C_ITEM::ON_STATE);
			s.register_member("C_ITEM.OWNER", &C_ITEM::OWNER);
			s.register_member("C_ITEM.OWNERGUILD", &C_ITEM::OWNERGUILD);
			s.register_member("C_ITEM.DISGUISEGUILD", &C_ITEM::DISGUISEGUILD);
			s.register_member("C_ITEM.VISUAL", &C_ITEM::VISUAL);
			s.register_member("C_ITEM.VISUAL_CHANGE", &C_ITEM::VISUAL_CHANGE);
			s.register_member("C_ITEM.VISUAL_SKIN", &C_ITEM::VISUAL_SKIN);
			s.register_member("C_ITEM.SCEMENAME", &C_ITEM::SCEMENAME);
			s.register_member("C_ITEM.MATERIAL", &C_ITEM::MATERIAL);
			s.register_member("C_ITEM.MUNITION", &C_ITEM::MUNITION);
			s.register_member("C_ITEM.SPELL", &C_ITEM::SPELL);
			s.register_member("C_ITEM.RANGE", &C_ITEM::RANGE);
			s.register_member("C_ITEM.MAG_CIRCLE", &C_ITEM::MAG_CIRCLE);
			s.register_member("C_ITEM.DESCRIPTION", &C_ITEM::DESCRIPTION);
			s.register_member("C_ITEM.TEXT", &C_ITEM::TEXT);
			s.register_member("C_ITEM.COUNT", &C_ITEM::COUNT);

			// Gothic 2 only
			if (s.find_symbol_by_name("C_ITEM.EFFECT") != nullptr) {
				s.register_member("C_ITEM.EFFECT", &C_ITEM::EFFECT);
				s.register_member("C_ITEM.INV_ZBIAS", &C_ITEM::INV_ZBIAS);
				s.register_member("C_ITEM.INV_ROTX", &C_ITEM::INV_ROTX);
				s.register_member("C_ITEM.INV_ROTY", &C_ITEM::INV_ROTY);
				s.register_member("C_ITEM.INV_ROTZ", &C_ITEM::INV_ROTZ);
				s.register_member("C_ITEM.INV_ANIMATE", &C_ITEM::INV_ANIMATE);
			}
		}
	};

	struct C_FOCUS {
		var float NPC_LONGRANGE;
		var float NPC_RANGE1;
		var float NPC_RANGE2;
		var float NPC_AZI;
		var float NPC_ELEVDO;
		var float NPC_ELEVUP;
		var int NPC_PRIO;
		var float ITEM_RANGE1;
		var float ITEM_RANGE2;
		var float ITEM_AZI;
		var float ITEM_ELEVDO;
		var float ITEM_ELEVUP;
		var int ITEM_PRIO;
		var float MOB_RANGE1;
		var float MOB_RANGE2;
		var float MOB_AZI;
		var float MOB_ELEVDO;
		var float MOB_ELEVUP;
		var int MOB_PRIO;

		static void register_(script& s) {
			s.register_member("C_FOCUS.NPC_LONGRANGE", &C_FOCUS::NPC_LONGRANGE);
			s.register_member("C_FOCUS.NPC_RANGE1", &C_FOCUS::NPC_RANGE1);
			s.register_member("C_FOCUS.NPC_RANGE2", &C_FOCUS::NPC_RANGE2);
			s.register_member("C_FOCUS.NPC_AZI", &C_FOCUS::NPC_AZI);
			s.register_member("C_FOCUS.NPC_ELEVDO", &C_FOCUS::NPC_ELEVDO);
			s.register_member("C_FOCUS.NPC_ELEVUP", &C_FOCUS::NPC_ELEVUP);
			s.register_member("C_FOCUS.NPC_PRIO", &C_FOCUS::NPC_PRIO);
			s.register_member("C_FOCUS.ITEM_RANGE1", &C_FOCUS::ITEM_RANGE1);
			s.register_member("C_FOCUS.ITEM_RANGE2", &C_FOCUS::ITEM_RANGE2);
			s.register_member("C_FOCUS.ITEM_AZI", &C_FOCUS::ITEM_AZI);
			s.register_member("C_FOCUS.ITEM_ELEVDO", &C_FOCUS::ITEM_ELEVDO);
			s.register_member("C_FOCUS.ITEM_ELEVUP", &C_FOCUS::ITEM_ELEVUP);
			s.register_member("C_FOCUS.ITEM_PRIO", &C_FOCUS::ITEM_PRIO);
			s.register_member("C_FOCUS.MOB_RANGE1", &C_FOCUS::MOB_RANGE1);
			s.register_member("C_FOCUS.MOB_RANGE2", &C_FOCUS::MOB_RANGE2);
			s.register_member("C_FOCUS.MOB_AZI", &C_FOCUS::MOB_AZI);
			s.register_member("C_FOCUS.MOB_ELEVDO", &C_FOCUS::MOB_ELEVDO);
			s.register_member("C_FOCUS.MOB_ELEVUP", &C_FOCUS::MOB_ELEVUP);
			s.register_member("C_FOCUS.MOB_PRIO", &C_FOCUS::MOB_PRIO);
		}
	};

	struct C_INFO {
		var int NPC;
		var int NR;
		var int IMPORTANT;
		var func CONDITION;
		var func INFORMATION;
		var string DESCRIPTION;
		var int TRADE;
		var int PERMANENT;

		static void register_(script& s) {
			s.register_member("C_INFO.NPC", &C_INFO::NPC);
			s.register_member("C_INFO.NR", &C_INFO::NR);
			s.register_member("C_INFO.IMPORTANT", &C_INFO::IMPORTANT);
			s.register_member("C_INFO.CONDITION", &C_INFO::CONDITION);
			s.register_member("C_INFO.INFORMATION", &C_INFO::INFORMATION);
			s.register_member("C_INFO.DESCRIPTION", &C_INFO::DESCRIPTION);
			s.register_member("C_INFO.TRADE", &C_INFO::TRADE);
			s.register_member("C_INFO.PERMANENT", &C_INFO::PERMANENT);
		}
	};

	struct C_ITEMREACT {
		var int NPC;
		var int TRADE_ITEM;
		var int TRADE_AMOUNT;
		var int REQUESTED_CAT;
		var int REQUESTED_ITEM;
		var int REQUESTED_AMOUNT;
		var func REACTION;

		static void register_(script& s) {
			s.register_member("C_ITEMREACT.NPC", &C_ITEMREACT::NPC);
			s.register_member("C_ITEMREACT.TRADE_ITEM", &C_ITEMREACT::TRADE_ITEM);
			s.register_member("C_ITEMREACT.TRADE_AMOUNT", &C_ITEMREACT::TRADE_AMOUNT);
			s.register_member("C_ITEMREACT.REQUESTED_CAT", &C_ITEMREACT::REQUESTED_CAT);
			s.register_member("C_ITEMREACT.REQUESTED_ITEM", &C_ITEMREACT::REQUESTED_ITEM);
			s.register_member("C_ITEMREACT.REQUESTED_AMOUNT", &C_ITEMREACT::REQUESTED_AMOUNT);
			s.register_member("C_ITEMREACT.REACTION", &C_ITEMREACT::REACTION);
		}
	};

	struct C_SPELL {
		var float TIME_PER_MANA;
		var int DAMAGE_PER_LEVEL;
		var int DAMAGETYPE;
		var int SPELLTYPE;
		var int CANTURNDURINGINVEST;
		var int CANCHANGETARGETDURINGINVEST;
		var int ISMULTIEFFECT;
		var int TARGETCOLLECTALGO;
		var int TARGETCOLLECTTYPE;
		var int TARGETCOLLECTRANGE;
		var int TARGETCOLLECTAZI;
		var int TARGETCOLLECTELEV;

		static void register_(script& s) {
			// TODO: TEST FOR G1
			s.register_member("C_SPELL.TIME_PER_MANA", &C_SPELL::TIME_PER_MANA);
			s.register_member("C_SPELL.DAMAGE_PER_LEVEL", &C_SPELL::DAMAGE_PER_LEVEL);
			s.register_member("C_SPELL.DAMAGETYPE", &C_SPELL::DAMAGETYPE);
			s.register_member("C_SPELL.SPELLTYPE", &C_SPELL::SPELLTYPE);
			s.register_member("C_SPELL.CANTURNDURINGINVEST", &C_SPELL::CANTURNDURINGINVEST);
			s.register_member("C_SPELL.CANCHANGETARGETDURINGINVEST", &C_SPELL::CANCHANGETARGETDURINGINVEST);
			s.register_member("C_SPELL.ISMULTIEFFECT", &C_SPELL::ISMULTIEFFECT);
			s.register_member("C_SPELL.TARGETCOLLECTALGO", &C_SPELL::TARGETCOLLECTALGO);
			s.register_member("C_SPELL.TARGETCOLLECTTYPE", &C_SPELL::TARGETCOLLECTTYPE);
			s.register_member("C_SPELL.TARGETCOLLECTRANGE", &C_SPELL::TARGETCOLLECTRANGE);
			s.register_member("C_SPELL.TARGETCOLLECTAZI", &C_SPELL::TARGETCOLLECTAZI);
			s.register_member("C_SPELL.TARGETCOLLECTELEV", &C_SPELL::TARGETCOLLECTELEV);
		}
	};

	struct C_SVM {
		var string MILGREETINGS;
		var string PALGREETINGS;
		var string WEATHER;
		var string IGETYOUSTILL;
		var string DIEENEMY;
		var string DIEMONSTER;
		var string ADDON_DIEMONSTER;
		var string ADDON_DIEMONSTER2;
		var string DIRTYTHIEF;
		var string HANDSOFF;
		var string SHEEPKILLER;
		var string SHEEPKILLERMONSTER;
		var string YOUMURDERER;
		var string DIESTUPIDBEAST;
		var string YOUDAREHITME;
		var string YOUASKEDFORIT;
		var string THENIBEATYOUOUTOFHERE;
		var string WHATDIDYOUDOINTHERE;
		var string WILLYOUSTOPFIGHTING;
		var string KILLENEMY;
		var string ENEMYKILLED;
		var string MONSTERKILLED;
		var string ADDON_MONSTERKILLED;
		var string ADDON_MONSTERKILLED2;
		var string THIEFDOWN;
		var string RUMFUMMLERDOWN;
		var string SHEEPATTACKERDOWN;
		var string KILLMURDERER;
		var string STUPIDBEASTKILLED;
		var string NEVERHITMEAGAIN;
		var string YOUBETTERSHOULDHAVELISTENED;
		var string GETUPANDBEGONE;
		var string NEVERENTERROOMAGAIN;
		var string THEREISNOFIGHTINGHERE;
		var string SPAREME;
		var string RUNAWAY;
		var string ALARM;
		var string GUARDS;
		var string HELP;
		var string GOODMONSTERKILL;
		var string GOODKILL;
		var string NOTNOW;
		var string RUNCOWARD;
		var string GETOUTOFHERE;
		var string WHYAREYOUINHERE;
		var string YESGOOUTOFHERE;
		var string WHATSTHISSUPPOSEDTOBE;
		var string YOUDISTURBEDMYSLUMBER;
		var string ITOOKYOURGOLD;
		var string SHITNOGOLD;
		var string ITAKEYOURWEAPON;
		var string WHATAREYOUDOING;
		var string LOOKINGFORTROUBLEAGAIN;
		var string STOPMAGIC;
		var string ISAIDSTOPMAGIC;
		var string WEAPONDOWN;
		var string ISAIDWEAPONDOWN;
		var string WISEMOVE;
		var string NEXTTIMEYOUREINFORIT;
		var string OHMYHEAD;
		var string THERESAFIGHT;
		var string OHMYGODITSAFIGHT;
		var string GOODVICTORY;
		var string NOTBAD;
		var string OHMYGODHESDOWN;
		var string CHEERFRIEND01;
		var string CHEERFRIEND02;
		var string CHEERFRIEND03;
		var string OOH01;
		var string OOH02;
		var string OOH03;
		var string WHATWASTHAT;
		var string GETOUTOFMYBED;
		var string AWAKE;
		var string ABS_COMMANDER;
		var string ABS_MONASTERY;
		var string ABS_FARM;
		var string ABS_GOOD;
		var string SHEEPKILLER_CRIME;
		var string ATTACK_CRIME;
		var string THEFT_CRIME;
		var string MURDER_CRIME;
		var string PAL_CITY_CRIME;
		var string MIL_CITY_CRIME;
		var string CITY_CRIME;
		var string MONA_CRIME;
		var string FARM_CRIME;
		var string OC_CRIME;
		var string TOUGHGUY_ATTACKLOST;
		var string TOUGHGUY_ATTACKWON;
		var string TOUGHGUY_PLAYERATTACK;
		var string GOLD_1000;
		var string GOLD_950;
		var string GOLD_900;
		var string GOLD_850;
		var string GOLD_800;
		var string GOLD_750;
		var string GOLD_700;
		var string GOLD_650;
		var string GOLD_600;
		var string GOLD_550;
		var string GOLD_500;
		var string GOLD_450;
		var string GOLD_400;
		var string GOLD_350;
		var string GOLD_300;
		var string GOLD_250;
		var string GOLD_200;
		var string GOLD_150;
		var string GOLD_100;
		var string GOLD_90;
		var string GOLD_80;
		var string GOLD_70;
		var string GOLD_60;
		var string GOLD_50;
		var string GOLD_40;
		var string GOLD_30;
		var string GOLD_20;
		var string GOLD_10;
		var string SMALLTALK01;
		var string SMALLTALK02;
		var string SMALLTALK03;
		var string SMALLTALK04;
		var string SMALLTALK05;
		var string SMALLTALK06;
		var string SMALLTALK07;
		var string SMALLTALK08;
		var string SMALLTALK09;
		var string SMALLTALK10;
		var string SMALLTALK11;
		var string SMALLTALK12;
		var string SMALLTALK13;
		var string SMALLTALK14;
		var string SMALLTALK15;
		var string SMALLTALK16;
		var string SMALLTALK17;
		var string SMALLTALK18;
		var string SMALLTALK19;
		var string SMALLTALK20;
		var string SMALLTALK21;
		var string SMALLTALK22;
		var string SMALLTALK23;
		var string SMALLTALK24;
		var string SMALLTALK25;
		var string SMALLTALK26;
		var string SMALLTALK27;
		var string SMALLTALK28;
		var string SMALLTALK29;
		var string SMALLTALK30;
		var string NOLEARNNOPOINTS;
		var string NOLEARNOVERPERSONALMAX;
		var string NOLEARNYOUREBETTER;
		var string YOULEARNEDSOMETHING;
		var string UNTERSTADT;
		var string OBERSTADT;
		var string TEMPEL;
		var string MARKT;
		var string GALGEN;
		var string KASERNE;
		var string HAFEN;
		var string WHERETO;
		var string OBERSTADT_2_UNTERSTADT;
		var string UNTERSTADT_2_OBERSTADT;
		var string UNTERSTADT_2_TEMPEL;
		var string UNTERSTADT_2_HAFEN;
		var string TEMPEL_2_UNTERSTADT;
		var string TEMPEL_2_MARKT;
		var string TEMPEL_2_GALGEN;
		var string MARKT_2_TEMPEL;
		var string MARKT_2_KASERNE;
		var string MARKT_2_GALGEN;
		var string GALGEN_2_TEMPEL;
		var string GALGEN_2_MARKT;
		var string GALGEN_2_KASERNE;
		var string KASERNE_2_MARKT;
		var string KASERNE_2_GALGEN;
		var string HAFEN_2_UNTERSTADT;
		var string DEAD;
		var string AARGH_1;
		var string AARGH_2;
		var string AARGH_3;
		var string ADDON_WRONGARMOR;
		var string ADDON_WRONGARMOR_SLD;
		var string ADDON_WRONGARMOR_MIL;
		var string ADDON_WRONGARMOR_KDF;
		var string ADDON_NOARMOR_BDT;
		var string ADDON_DIEBANDIT;
		var string ADDON_DIRTYPIRATE;
		var string SC_HEYTURNAROUND;
		var string SC_HEYTURNAROUND02;
		var string SC_HEYTURNAROUND03;
		var string SC_HEYTURNAROUND04;
		var string SC_HEYWAITASECOND;
		var string DOESNTWORK;
		var string PICKBROKE;
		var string NEEDKEY;
		var string NOMOREPICKS;
		var string NOPICKLOCKTALENT;
		var string NOSWEEPING;
		var string PICKLOCKORKEYMISSING;
		var string KEYMISSING;
		var string PICKLOCKMISSING;
		var string NEVEROPEN;
		var string MISSINGITEM;
		var string DONTKNOW;
		var string NOTHINGTOGET;
		var string NOTHINGTOGET02;
		var string NOTHINGTOGET03;
		var string HEALSHRINE;
		var string HEALLASTSHRINE;
		var string IRDORATHTHEREYOUARE;
		var string SCOPENSIRDORATHBOOK;
		var string SCOPENSLASTDOOR;
		var string TRADE_1;
		var string TRADE_2;
		var string TRADE_3;
		var string VERSTEHE;
		var string FOUNDTREASURE;
		var string CANTUNDERSTANDTHIS;
		var string CANTREADTHIS;
		var string STONEPLATE_1;
		var string STONEPLATE_2;
		var string STONEPLATE_3;
		var string COUGH;
		var string HUI;
		var string ADDON_THISLITTLEBASTARD;
		var string ADDON_OPENADANOSTEMPLE;
		var string ATTENTAT_ADDON_DESCRIPTION;
		var string ATTENTAT_ADDON_DESCRIPTION2;
		var string ATTENTAT_ADDON_PRO;
		var string ATTENTAT_ADDON_CONTRA;
		var string MINE_ADDON_DESCRIPTION;
		var string ADDON_SUMMONANCIENTGHOST;
		var string ADDON_ANCIENTGHOST_NOTNEAR;
		var string ADDON_GOLD_DESCRIPTION;

#define REG_IF_SYM_EXIST(sym, ref) do {if (s.find_symbol_by_name(sym)) {s.register_member(sym, ref);}} while(false)

		static void register_(script& s) {
			REG_IF_SYM_EXIST("C_SVM.MILGREETINGS", &C_SVM::MILGREETINGS);
			REG_IF_SYM_EXIST("C_SVM.PALGREETINGS", &C_SVM::PALGREETINGS);
			REG_IF_SYM_EXIST("C_SVM.WEATHER", &C_SVM::WEATHER);
			REG_IF_SYM_EXIST("C_SVM.IGETYOUSTILL", &C_SVM::IGETYOUSTILL);
			REG_IF_SYM_EXIST("C_SVM.DIEENEMY", &C_SVM::DIEENEMY);
			REG_IF_SYM_EXIST("C_SVM.DIEMONSTER", &C_SVM::DIEMONSTER);
			REG_IF_SYM_EXIST("C_SVM.ADDON_DIEMONSTER", &C_SVM::ADDON_DIEMONSTER);
			REG_IF_SYM_EXIST("C_SVM.ADDON_DIEMONSTER2", &C_SVM::ADDON_DIEMONSTER2);
			REG_IF_SYM_EXIST("C_SVM.DIRTYTHIEF", &C_SVM::DIRTYTHIEF);
			REG_IF_SYM_EXIST("C_SVM.HANDSOFF", &C_SVM::HANDSOFF);
			REG_IF_SYM_EXIST("C_SVM.SHEEPKILLER", &C_SVM::SHEEPKILLER);
			REG_IF_SYM_EXIST("C_SVM.SHEEPKILLERMONSTER", &C_SVM::SHEEPKILLERMONSTER);
			REG_IF_SYM_EXIST("C_SVM.YOUMURDERER", &C_SVM::YOUMURDERER);
			REG_IF_SYM_EXIST("C_SVM.DIESTUPIDBEAST", &C_SVM::DIESTUPIDBEAST);
			REG_IF_SYM_EXIST("C_SVM.YOUDAREHITME", &C_SVM::YOUDAREHITME);
			REG_IF_SYM_EXIST("C_SVM.YOUASKEDFORIT", &C_SVM::YOUASKEDFORIT);
			REG_IF_SYM_EXIST("C_SVM.THENIBEATYOUOUTOFHERE", &C_SVM::THENIBEATYOUOUTOFHERE);
			REG_IF_SYM_EXIST("C_SVM.WHATDIDYOUDOINTHERE", &C_SVM::WHATDIDYOUDOINTHERE);
			REG_IF_SYM_EXIST("C_SVM.WILLYOUSTOPFIGHTING", &C_SVM::WILLYOUSTOPFIGHTING);
			REG_IF_SYM_EXIST("C_SVM.KILLENEMY", &C_SVM::KILLENEMY);
			REG_IF_SYM_EXIST("C_SVM.ENEMYKILLED", &C_SVM::ENEMYKILLED);
			REG_IF_SYM_EXIST("C_SVM.MONSTERKILLED", &C_SVM::MONSTERKILLED);
			REG_IF_SYM_EXIST("C_SVM.ADDON_MONSTERKILLED", &C_SVM::ADDON_MONSTERKILLED);
			REG_IF_SYM_EXIST("C_SVM.ADDON_MONSTERKILLED2", &C_SVM::ADDON_MONSTERKILLED2);
			REG_IF_SYM_EXIST("C_SVM.THIEFDOWN", &C_SVM::THIEFDOWN);
			REG_IF_SYM_EXIST("C_SVM.RUMFUMMLERDOWN", &C_SVM::RUMFUMMLERDOWN);
			REG_IF_SYM_EXIST("C_SVM.SHEEPATTACKERDOWN", &C_SVM::SHEEPATTACKERDOWN);
			REG_IF_SYM_EXIST("C_SVM.KILLMURDERER", &C_SVM::KILLMURDERER);
			REG_IF_SYM_EXIST("C_SVM.STUPIDBEASTKILLED", &C_SVM::STUPIDBEASTKILLED);
			REG_IF_SYM_EXIST("C_SVM.NEVERHITMEAGAIN", &C_SVM::NEVERHITMEAGAIN);
			REG_IF_SYM_EXIST("C_SVM.YOUBETTERSHOULDHAVELISTENED", &C_SVM::YOUBETTERSHOULDHAVELISTENED);
			REG_IF_SYM_EXIST("C_SVM.GETUPANDBEGONE", &C_SVM::GETUPANDBEGONE);
			REG_IF_SYM_EXIST("C_SVM.NEVERENTERROOMAGAIN", &C_SVM::NEVERENTERROOMAGAIN);
			REG_IF_SYM_EXIST("C_SVM.THEREISNOFIGHTINGHERE", &C_SVM::THEREISNOFIGHTINGHERE);
			REG_IF_SYM_EXIST("C_SVM.SPAREME", &C_SVM::SPAREME);
			REG_IF_SYM_EXIST("C_SVM.RUNAWAY", &C_SVM::RUNAWAY);
			REG_IF_SYM_EXIST("C_SVM.ALARM", &C_SVM::ALARM);
			REG_IF_SYM_EXIST("C_SVM.GUARDS", &C_SVM::GUARDS);
			REG_IF_SYM_EXIST("C_SVM.HELP", &C_SVM::HELP);
			REG_IF_SYM_EXIST("C_SVM.GOODMONSTERKILL", &C_SVM::GOODMONSTERKILL);
			REG_IF_SYM_EXIST("C_SVM.GOODKILL", &C_SVM::GOODKILL);
			REG_IF_SYM_EXIST("C_SVM.NOTNOW", &C_SVM::NOTNOW);
			REG_IF_SYM_EXIST("C_SVM.RUNCOWARD", &C_SVM::RUNCOWARD);
			REG_IF_SYM_EXIST("C_SVM.GETOUTOFHERE", &C_SVM::GETOUTOFHERE);
			REG_IF_SYM_EXIST("C_SVM.WHYAREYOUINHERE", &C_SVM::WHYAREYOUINHERE);
			REG_IF_SYM_EXIST("C_SVM.YESGOOUTOFHERE", &C_SVM::YESGOOUTOFHERE);
			REG_IF_SYM_EXIST("C_SVM.WHATSTHISSUPPOSEDTOBE", &C_SVM::WHATSTHISSUPPOSEDTOBE);
			REG_IF_SYM_EXIST("C_SVM.YOUDISTURBEDMYSLUMBER", &C_SVM::YOUDISTURBEDMYSLUMBER);
			REG_IF_SYM_EXIST("C_SVM.ITOOKYOURGOLD", &C_SVM::ITOOKYOURGOLD);
			REG_IF_SYM_EXIST("C_SVM.SHITNOGOLD", &C_SVM::SHITNOGOLD);
			REG_IF_SYM_EXIST("C_SVM.ITAKEYOURWEAPON", &C_SVM::ITAKEYOURWEAPON);
			REG_IF_SYM_EXIST("C_SVM.WHATAREYOUDOING", &C_SVM::WHATAREYOUDOING);
			REG_IF_SYM_EXIST("C_SVM.LOOKINGFORTROUBLEAGAIN", &C_SVM::LOOKINGFORTROUBLEAGAIN);
			REG_IF_SYM_EXIST("C_SVM.STOPMAGIC", &C_SVM::STOPMAGIC);
			REG_IF_SYM_EXIST("C_SVM.ISAIDSTOPMAGIC", &C_SVM::ISAIDSTOPMAGIC);
			REG_IF_SYM_EXIST("C_SVM.WEAPONDOWN", &C_SVM::WEAPONDOWN);
			REG_IF_SYM_EXIST("C_SVM.ISAIDWEAPONDOWN", &C_SVM::ISAIDWEAPONDOWN);
			REG_IF_SYM_EXIST("C_SVM.WISEMOVE", &C_SVM::WISEMOVE);
			REG_IF_SYM_EXIST("C_SVM.NEXTTIMEYOUREINFORIT", &C_SVM::NEXTTIMEYOUREINFORIT);
			REG_IF_SYM_EXIST("C_SVM.OHMYHEAD", &C_SVM::OHMYHEAD);
			REG_IF_SYM_EXIST("C_SVM.THERESAFIGHT", &C_SVM::THERESAFIGHT);
			REG_IF_SYM_EXIST("C_SVM.OHMYGODITSAFIGHT", &C_SVM::OHMYGODITSAFIGHT);
			REG_IF_SYM_EXIST("C_SVM.GOODVICTORY", &C_SVM::GOODVICTORY);
			REG_IF_SYM_EXIST("C_SVM.NOTBAD", &C_SVM::NOTBAD);
			REG_IF_SYM_EXIST("C_SVM.OHMYGODHESDOWN", &C_SVM::OHMYGODHESDOWN);
			REG_IF_SYM_EXIST("C_SVM.CHEERFRIEND01", &C_SVM::CHEERFRIEND01);
			REG_IF_SYM_EXIST("C_SVM.CHEERFRIEND02", &C_SVM::CHEERFRIEND02);
			REG_IF_SYM_EXIST("C_SVM.CHEERFRIEND03", &C_SVM::CHEERFRIEND03);
			REG_IF_SYM_EXIST("C_SVM.OOH01", &C_SVM::OOH01);
			REG_IF_SYM_EXIST("C_SVM.OOH02", &C_SVM::OOH02);
			REG_IF_SYM_EXIST("C_SVM.OOH03", &C_SVM::OOH03);
			REG_IF_SYM_EXIST("C_SVM.WHATWASTHAT", &C_SVM::WHATWASTHAT);
			REG_IF_SYM_EXIST("C_SVM.GETOUTOFMYBED", &C_SVM::GETOUTOFMYBED);
			REG_IF_SYM_EXIST("C_SVM.AWAKE", &C_SVM::AWAKE);
			REG_IF_SYM_EXIST("C_SVM.ABS_COMMANDER", &C_SVM::ABS_COMMANDER);
			REG_IF_SYM_EXIST("C_SVM.ABS_MONASTERY", &C_SVM::ABS_MONASTERY);
			REG_IF_SYM_EXIST("C_SVM.ABS_FARM", &C_SVM::ABS_FARM);
			REG_IF_SYM_EXIST("C_SVM.ABS_GOOD", &C_SVM::ABS_GOOD);
			REG_IF_SYM_EXIST("C_SVM.SHEEPKILLER_CRIME", &C_SVM::SHEEPKILLER_CRIME);
			REG_IF_SYM_EXIST("C_SVM.ATTACK_CRIME", &C_SVM::ATTACK_CRIME);
			REG_IF_SYM_EXIST("C_SVM.THEFT_CRIME", &C_SVM::THEFT_CRIME);
			REG_IF_SYM_EXIST("C_SVM.MURDER_CRIME", &C_SVM::MURDER_CRIME);
			REG_IF_SYM_EXIST("C_SVM.PAL_CITY_CRIME", &C_SVM::PAL_CITY_CRIME);
			REG_IF_SYM_EXIST("C_SVM.MIL_CITY_CRIME", &C_SVM::MIL_CITY_CRIME);
			REG_IF_SYM_EXIST("C_SVM.CITY_CRIME", &C_SVM::CITY_CRIME);
			REG_IF_SYM_EXIST("C_SVM.MONA_CRIME", &C_SVM::MONA_CRIME);
			REG_IF_SYM_EXIST("C_SVM.FARM_CRIME", &C_SVM::FARM_CRIME);
			REG_IF_SYM_EXIST("C_SVM.OC_CRIME", &C_SVM::OC_CRIME);
			REG_IF_SYM_EXIST("C_SVM.TOUGHGUY_ATTACKLOST", &C_SVM::TOUGHGUY_ATTACKLOST);
			REG_IF_SYM_EXIST("C_SVM.TOUGHGUY_ATTACKWON", &C_SVM::TOUGHGUY_ATTACKWON);
			REG_IF_SYM_EXIST("C_SVM.TOUGHGUY_PLAYERATTACK", &C_SVM::TOUGHGUY_PLAYERATTACK);
			REG_IF_SYM_EXIST("C_SVM.GOLD_1000", &C_SVM::GOLD_1000);
			REG_IF_SYM_EXIST("C_SVM.GOLD_950", &C_SVM::GOLD_950);
			REG_IF_SYM_EXIST("C_SVM.GOLD_900", &C_SVM::GOLD_900);
			REG_IF_SYM_EXIST("C_SVM.GOLD_850", &C_SVM::GOLD_850);
			REG_IF_SYM_EXIST("C_SVM.GOLD_800", &C_SVM::GOLD_800);
			REG_IF_SYM_EXIST("C_SVM.GOLD_750", &C_SVM::GOLD_750);
			REG_IF_SYM_EXIST("C_SVM.GOLD_700", &C_SVM::GOLD_700);
			REG_IF_SYM_EXIST("C_SVM.GOLD_650", &C_SVM::GOLD_650);
			REG_IF_SYM_EXIST("C_SVM.GOLD_600", &C_SVM::GOLD_600);
			REG_IF_SYM_EXIST("C_SVM.GOLD_550", &C_SVM::GOLD_550);
			REG_IF_SYM_EXIST("C_SVM.GOLD_500", &C_SVM::GOLD_500);
			REG_IF_SYM_EXIST("C_SVM.GOLD_450", &C_SVM::GOLD_450);
			REG_IF_SYM_EXIST("C_SVM.GOLD_400", &C_SVM::GOLD_400);
			REG_IF_SYM_EXIST("C_SVM.GOLD_350", &C_SVM::GOLD_350);
			REG_IF_SYM_EXIST("C_SVM.GOLD_300", &C_SVM::GOLD_300);
			REG_IF_SYM_EXIST("C_SVM.GOLD_250", &C_SVM::GOLD_250);
			REG_IF_SYM_EXIST("C_SVM.GOLD_200", &C_SVM::GOLD_200);
			REG_IF_SYM_EXIST("C_SVM.GOLD_150", &C_SVM::GOLD_150);
			REG_IF_SYM_EXIST("C_SVM.GOLD_100", &C_SVM::GOLD_100);
			REG_IF_SYM_EXIST("C_SVM.GOLD_90", &C_SVM::GOLD_90);
			REG_IF_SYM_EXIST("C_SVM.GOLD_80", &C_SVM::GOLD_80);
			REG_IF_SYM_EXIST("C_SVM.GOLD_70", &C_SVM::GOLD_70);
			REG_IF_SYM_EXIST("C_SVM.GOLD_60", &C_SVM::GOLD_60);
			REG_IF_SYM_EXIST("C_SVM.GOLD_50", &C_SVM::GOLD_50);
			REG_IF_SYM_EXIST("C_SVM.GOLD_40", &C_SVM::GOLD_40);
			REG_IF_SYM_EXIST("C_SVM.GOLD_30", &C_SVM::GOLD_30);
			REG_IF_SYM_EXIST("C_SVM.GOLD_20", &C_SVM::GOLD_20);
			REG_IF_SYM_EXIST("C_SVM.GOLD_10", &C_SVM::GOLD_10);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK01", &C_SVM::SMALLTALK01);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK02", &C_SVM::SMALLTALK02);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK03", &C_SVM::SMALLTALK03);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK04", &C_SVM::SMALLTALK04);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK05", &C_SVM::SMALLTALK05);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK06", &C_SVM::SMALLTALK06);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK07", &C_SVM::SMALLTALK07);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK08", &C_SVM::SMALLTALK08);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK09", &C_SVM::SMALLTALK09);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK10", &C_SVM::SMALLTALK10);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK11", &C_SVM::SMALLTALK11);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK12", &C_SVM::SMALLTALK12);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK13", &C_SVM::SMALLTALK13);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK14", &C_SVM::SMALLTALK14);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK15", &C_SVM::SMALLTALK15);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK16", &C_SVM::SMALLTALK16);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK17", &C_SVM::SMALLTALK17);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK18", &C_SVM::SMALLTALK18);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK19", &C_SVM::SMALLTALK19);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK20", &C_SVM::SMALLTALK20);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK21", &C_SVM::SMALLTALK21);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK22", &C_SVM::SMALLTALK22);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK23", &C_SVM::SMALLTALK23);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK24", &C_SVM::SMALLTALK24);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK25", &C_SVM::SMALLTALK25);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK26", &C_SVM::SMALLTALK26);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK27", &C_SVM::SMALLTALK27);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK28", &C_SVM::SMALLTALK28);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK29", &C_SVM::SMALLTALK29);
			REG_IF_SYM_EXIST("C_SVM.SMALLTALK30", &C_SVM::SMALLTALK30);
			REG_IF_SYM_EXIST("C_SVM.NOLEARNNOPOINTS", &C_SVM::NOLEARNNOPOINTS);
			REG_IF_SYM_EXIST("C_SVM.NOLEARNOVERPERSONALMAX", &C_SVM::NOLEARNOVERPERSONALMAX);
			REG_IF_SYM_EXIST("C_SVM.NOLEARNYOUREBETTER", &C_SVM::NOLEARNYOUREBETTER);
			REG_IF_SYM_EXIST("C_SVM.YOULEARNEDSOMETHING", &C_SVM::YOULEARNEDSOMETHING);
			REG_IF_SYM_EXIST("C_SVM.UNTERSTADT", &C_SVM::UNTERSTADT);
			REG_IF_SYM_EXIST("C_SVM.OBERSTADT", &C_SVM::OBERSTADT);
			REG_IF_SYM_EXIST("C_SVM.TEMPEL", &C_SVM::TEMPEL);
			REG_IF_SYM_EXIST("C_SVM.MARKT", &C_SVM::MARKT);
			REG_IF_SYM_EXIST("C_SVM.GALGEN", &C_SVM::GALGEN);
			REG_IF_SYM_EXIST("C_SVM.KASERNE", &C_SVM::KASERNE);
			REG_IF_SYM_EXIST("C_SVM.HAFEN", &C_SVM::HAFEN);
			REG_IF_SYM_EXIST("C_SVM.WHERETO", &C_SVM::WHERETO);
			REG_IF_SYM_EXIST("C_SVM.OBERSTADT_2_UNTERSTADT", &C_SVM::OBERSTADT_2_UNTERSTADT);
			REG_IF_SYM_EXIST("C_SVM.UNTERSTADT_2_OBERSTADT", &C_SVM::UNTERSTADT_2_OBERSTADT);
			REG_IF_SYM_EXIST("C_SVM.UNTERSTADT_2_TEMPEL", &C_SVM::UNTERSTADT_2_TEMPEL);
			REG_IF_SYM_EXIST("C_SVM.UNTERSTADT_2_HAFEN", &C_SVM::UNTERSTADT_2_HAFEN);
			REG_IF_SYM_EXIST("C_SVM.TEMPEL_2_UNTERSTADT", &C_SVM::TEMPEL_2_UNTERSTADT);
			REG_IF_SYM_EXIST("C_SVM.TEMPEL_2_MARKT", &C_SVM::TEMPEL_2_MARKT);
			REG_IF_SYM_EXIST("C_SVM.TEMPEL_2_GALGEN", &C_SVM::TEMPEL_2_GALGEN);
			REG_IF_SYM_EXIST("C_SVM.MARKT_2_TEMPEL", &C_SVM::MARKT_2_TEMPEL);
			REG_IF_SYM_EXIST("C_SVM.MARKT_2_KASERNE", &C_SVM::MARKT_2_KASERNE);
			REG_IF_SYM_EXIST("C_SVM.MARKT_2_GALGEN", &C_SVM::MARKT_2_GALGEN);
			REG_IF_SYM_EXIST("C_SVM.GALGEN_2_TEMPEL", &C_SVM::GALGEN_2_TEMPEL);
			REG_IF_SYM_EXIST("C_SVM.GALGEN_2_MARKT", &C_SVM::GALGEN_2_MARKT);
			REG_IF_SYM_EXIST("C_SVM.GALGEN_2_KASERNE", &C_SVM::GALGEN_2_KASERNE);
			REG_IF_SYM_EXIST("C_SVM.KASERNE_2_MARKT", &C_SVM::KASERNE_2_MARKT);
			REG_IF_SYM_EXIST("C_SVM.KASERNE_2_GALGEN", &C_SVM::KASERNE_2_GALGEN);
			REG_IF_SYM_EXIST("C_SVM.HAFEN_2_UNTERSTADT", &C_SVM::HAFEN_2_UNTERSTADT);
			REG_IF_SYM_EXIST("C_SVM.DEAD", &C_SVM::DEAD);
			REG_IF_SYM_EXIST("C_SVM.AARGH_1", &C_SVM::AARGH_1);
			REG_IF_SYM_EXIST("C_SVM.AARGH_2", &C_SVM::AARGH_2);
			REG_IF_SYM_EXIST("C_SVM.AARGH_3", &C_SVM::AARGH_3);
			REG_IF_SYM_EXIST("C_SVM.ADDON_WRONGARMOR", &C_SVM::ADDON_WRONGARMOR);
			REG_IF_SYM_EXIST("C_SVM.ADDON_WRONGARMOR_SLD", &C_SVM::ADDON_WRONGARMOR_SLD);
			REG_IF_SYM_EXIST("C_SVM.ADDON_WRONGARMOR_MIL", &C_SVM::ADDON_WRONGARMOR_MIL);
			REG_IF_SYM_EXIST("C_SVM.ADDON_WRONGARMOR_KDF", &C_SVM::ADDON_WRONGARMOR_KDF);
			REG_IF_SYM_EXIST("C_SVM.ADDON_NOARMOR_BDT", &C_SVM::ADDON_NOARMOR_BDT);
			REG_IF_SYM_EXIST("C_SVM.ADDON_DIEBANDIT", &C_SVM::ADDON_DIEBANDIT);
			REG_IF_SYM_EXIST("C_SVM.ADDON_DIRTYPIRATE", &C_SVM::ADDON_DIRTYPIRATE);
			REG_IF_SYM_EXIST("C_SVM.SC_HEYTURNAROUND", &C_SVM::SC_HEYTURNAROUND);
			REG_IF_SYM_EXIST("C_SVM.SC_HEYTURNAROUND02", &C_SVM::SC_HEYTURNAROUND02);
			REG_IF_SYM_EXIST("C_SVM.SC_HEYTURNAROUND03", &C_SVM::SC_HEYTURNAROUND03);
			REG_IF_SYM_EXIST("C_SVM.SC_HEYTURNAROUND04", &C_SVM::SC_HEYTURNAROUND04);
			REG_IF_SYM_EXIST("C_SVM.SC_HEYWAITASECOND", &C_SVM::SC_HEYWAITASECOND);
			REG_IF_SYM_EXIST("C_SVM.DOESNTWORK", &C_SVM::DOESNTWORK);
			REG_IF_SYM_EXIST("C_SVM.PICKBROKE", &C_SVM::PICKBROKE);
			REG_IF_SYM_EXIST("C_SVM.NEEDKEY", &C_SVM::NEEDKEY);
			REG_IF_SYM_EXIST("C_SVM.NOMOREPICKS", &C_SVM::NOMOREPICKS);
			REG_IF_SYM_EXIST("C_SVM.NOPICKLOCKTALENT", &C_SVM::NOPICKLOCKTALENT);
			REG_IF_SYM_EXIST("C_SVM.NOSWEEPING", &C_SVM::NOSWEEPING);
			REG_IF_SYM_EXIST("C_SVM.PICKLOCKORKEYMISSING", &C_SVM::PICKLOCKORKEYMISSING);
			REG_IF_SYM_EXIST("C_SVM.KEYMISSING", &C_SVM::KEYMISSING);
			REG_IF_SYM_EXIST("C_SVM.PICKLOCKMISSING", &C_SVM::PICKLOCKMISSING);
			REG_IF_SYM_EXIST("C_SVM.NEVEROPEN", &C_SVM::NEVEROPEN);
			REG_IF_SYM_EXIST("C_SVM.MISSINGITEM", &C_SVM::MISSINGITEM);
			REG_IF_SYM_EXIST("C_SVM.DONTKNOW", &C_SVM::DONTKNOW);
			REG_IF_SYM_EXIST("C_SVM.NOTHINGTOGET", &C_SVM::NOTHINGTOGET);
			REG_IF_SYM_EXIST("C_SVM.NOTHINGTOGET02", &C_SVM::NOTHINGTOGET02);
			REG_IF_SYM_EXIST("C_SVM.NOTHINGTOGET03", &C_SVM::NOTHINGTOGET03);
			REG_IF_SYM_EXIST("C_SVM.HEALSHRINE", &C_SVM::HEALSHRINE);
			REG_IF_SYM_EXIST("C_SVM.HEALLASTSHRINE", &C_SVM::HEALLASTSHRINE);
			REG_IF_SYM_EXIST("C_SVM.IRDORATHTHEREYOUARE", &C_SVM::IRDORATHTHEREYOUARE);
			REG_IF_SYM_EXIST("C_SVM.SCOPENSIRDORATHBOOK", &C_SVM::SCOPENSIRDORATHBOOK);
			REG_IF_SYM_EXIST("C_SVM.SCOPENSLASTDOOR", &C_SVM::SCOPENSLASTDOOR);
			REG_IF_SYM_EXIST("C_SVM.TRADE_1", &C_SVM::TRADE_1);
			REG_IF_SYM_EXIST("C_SVM.TRADE_2", &C_SVM::TRADE_2);
			REG_IF_SYM_EXIST("C_SVM.TRADE_3", &C_SVM::TRADE_3);
			REG_IF_SYM_EXIST("C_SVM.VERSTEHE", &C_SVM::VERSTEHE);
			REG_IF_SYM_EXIST("C_SVM.FOUNDTREASURE", &C_SVM::FOUNDTREASURE);
			REG_IF_SYM_EXIST("C_SVM.CANTUNDERSTANDTHIS", &C_SVM::CANTUNDERSTANDTHIS);
			REG_IF_SYM_EXIST("C_SVM.CANTREADTHIS", &C_SVM::CANTREADTHIS);
			REG_IF_SYM_EXIST("C_SVM.STONEPLATE_1", &C_SVM::STONEPLATE_1);
			REG_IF_SYM_EXIST("C_SVM.STONEPLATE_2", &C_SVM::STONEPLATE_2);
			REG_IF_SYM_EXIST("C_SVM.STONEPLATE_3", &C_SVM::STONEPLATE_3);
			REG_IF_SYM_EXIST("C_SVM.COUGH", &C_SVM::COUGH);
			REG_IF_SYM_EXIST("C_SVM.HUI", &C_SVM::HUI);
			REG_IF_SYM_EXIST("C_SVM.ADDON_THISLITTLEBASTARD", &C_SVM::ADDON_THISLITTLEBASTARD);
			REG_IF_SYM_EXIST("C_SVM.ADDON_OPENADANOSTEMPLE", &C_SVM::ADDON_OPENADANOSTEMPLE);
			REG_IF_SYM_EXIST("C_SVM.ATTENTAT_ADDON_DESCRIPTION", &C_SVM::ATTENTAT_ADDON_DESCRIPTION);
			REG_IF_SYM_EXIST("C_SVM.ATTENTAT_ADDON_DESCRIPTION2", &C_SVM::ATTENTAT_ADDON_DESCRIPTION2);
			REG_IF_SYM_EXIST("C_SVM.ATTENTAT_ADDON_PRO", &C_SVM::ATTENTAT_ADDON_PRO);
			REG_IF_SYM_EXIST("C_SVM.ATTENTAT_ADDON_CONTRA", &C_SVM::ATTENTAT_ADDON_CONTRA);
			REG_IF_SYM_EXIST("C_SVM.MINE_ADDON_DESCRIPTION", &C_SVM::MINE_ADDON_DESCRIPTION);
			REG_IF_SYM_EXIST("C_SVM.ADDON_SUMMONANCIENTGHOST", &C_SVM::ADDON_SUMMONANCIENTGHOST);
			REG_IF_SYM_EXIST("C_SVM.ADDON_ANCIENTGHOST_NOTNEAR", &C_SVM::ADDON_ANCIENTGHOST_NOTNEAR);
			REG_IF_SYM_EXIST("C_SVM.ADDON_GOLD_DESCRIPTION", &C_SVM::ADDON_GOLD_DESCRIPTION);
		}
	};

#undef REG_IF_SYM_EXIST

	struct C_MENU {
		var string BACKPIC;
		var string BACKWORLD;
		var int POSX;
		var int POSY;
		var int DIMX;
		var int DIMY;
		var int ALPHA;
		var string MUSICTHEME;
		var int EVENTTIMERMSEC;
		var string ITEMS[150];
		var int FLAGS;
		var int DEFAULTOUTGAME;
		var int DEFAULTINGAME;

		static void register_(script& s) {
			s.register_member("C_MENU.BACKPIC", &C_MENU::BACKPIC);
			s.register_member("C_MENU.BACKWORLD", &C_MENU::BACKWORLD);
			s.register_member("C_MENU.POSX", &C_MENU::POSX);
			s.register_member("C_MENU.POSY", &C_MENU::POSY);
			s.register_member("C_MENU.DIMX", &C_MENU::DIMX);
			s.register_member("C_MENU.DIMY", &C_MENU::DIMY);
			s.register_member("C_MENU.ALPHA", &C_MENU::ALPHA);
			s.register_member("C_MENU.MUSICTHEME", &C_MENU::MUSICTHEME);
			s.register_member("C_MENU.EVENTTIMERMSEC", &C_MENU::EVENTTIMERMSEC);
			s.register_member("C_MENU.ITEMS", &C_MENU::ITEMS);
			s.register_member("C_MENU.FLAGS", &C_MENU::FLAGS);
			s.register_member("C_MENU.DEFAULTOUTGAME", &C_MENU::DEFAULTOUTGAME);
			s.register_member("C_MENU.DEFAULTINGAME", &C_MENU::DEFAULTINGAME);
		}
	};

	struct C_MENU_ITEM {
		var string FONTNAME;
		var string TEXT[10];
		var string BACKPIC;
		var string ALPHAMODE;
		var int ALPHA;
		var int TYPE;
		var int ONSELACTION[5];
		var string ONSELACTION_S[5];
		var string ONCHGSETOPTION;
		var string ONCHGSETOPTIONSECTION;
		var func ONEVENTACTION[10];
		var int POSX;
		var int POSY;
		var int DIMX;
		var int DIMY;
		var float SIZESTARTSCALE;
		var int FLAGS;
		var float OPENDELAYTIME;
		var float OPENDURATION;
		var float USERFLOAT[4];
		var string USERSTRING[4];
		var int FRAMESIZEX;
		var int FRAMESIZEY;
		var string HIDEIFOPTIONSECTIONSET;
		var string HIDEIFOPTIONSET;
		var int HIDEONVALUE;

		static void register_(script& s) {
			s.register_member("C_MENU_ITEM.FONTNAME", &C_MENU_ITEM::FONTNAME);
			s.register_member("C_MENU_ITEM.TEXT", &C_MENU_ITEM::TEXT);
			s.register_member("C_MENU_ITEM.BACKPIC", &C_MENU_ITEM::BACKPIC);
			s.register_member("C_MENU_ITEM.ALPHAMODE", &C_MENU_ITEM::ALPHAMODE);
			s.register_member("C_MENU_ITEM.ALPHA", &C_MENU_ITEM::ALPHA);
			s.register_member("C_MENU_ITEM.TYPE", &C_MENU_ITEM::TYPE);
			s.register_member("C_MENU_ITEM.ONSELACTION", &C_MENU_ITEM::ONSELACTION);
			s.register_member("C_MENU_ITEM.ONSELACTION_S", &C_MENU_ITEM::ONSELACTION_S);
			s.register_member("C_MENU_ITEM.ONCHGSETOPTION", &C_MENU_ITEM::ONCHGSETOPTION);
			s.register_member("C_MENU_ITEM.ONCHGSETOPTIONSECTION", &C_MENU_ITEM::ONCHGSETOPTIONSECTION);
			s.register_member("C_MENU_ITEM.ONEVENTACTION", &C_MENU_ITEM::ONEVENTACTION);
			s.register_member("C_MENU_ITEM.POSX", &C_MENU_ITEM::POSX);
			s.register_member("C_MENU_ITEM.POSY", &C_MENU_ITEM::POSY);
			s.register_member("C_MENU_ITEM.DIMX", &C_MENU_ITEM::DIMX);
			s.register_member("C_MENU_ITEM.DIMY", &C_MENU_ITEM::DIMY);
			s.register_member("C_MENU_ITEM.SIZESTARTSCALE", &C_MENU_ITEM::SIZESTARTSCALE);
			s.register_member("C_MENU_ITEM.FLAGS", &C_MENU_ITEM::FLAGS);
			s.register_member("C_MENU_ITEM.OPENDELAYTIME", &C_MENU_ITEM::OPENDELAYTIME);
			s.register_member("C_MENU_ITEM.OPENDURATION", &C_MENU_ITEM::OPENDURATION);
			s.register_member("C_MENU_ITEM.USERFLOAT", &C_MENU_ITEM::USERFLOAT);
			s.register_member("C_MENU_ITEM.USERSTRING", &C_MENU_ITEM::USERSTRING);
			s.register_member("C_MENU_ITEM.FRAMESIZEX", &C_MENU_ITEM::FRAMESIZEX);
			s.register_member("C_MENU_ITEM.FRAMESIZEY", &C_MENU_ITEM::FRAMESIZEY);

			// Gothic 2 only
			if (s.find_symbol_by_name("C_MENU_ITEM.HIDEIFOPTIONSECTIONSET") != nullptr) {
				s.register_member("C_MENU_ITEM.HIDEIFOPTIONSECTIONSET", &C_MENU_ITEM::HIDEIFOPTIONSECTIONSET);
				s.register_member("C_MENU_ITEM.HIDEIFOPTIONSET", &C_MENU_ITEM::HIDEIFOPTIONSET);
				s.register_member("C_MENU_ITEM.HIDEONVALUE", &C_MENU_ITEM::HIDEONVALUE);
			}
		}
	};

	struct CCAMSYS {
		var float BESTRANGE;
		var float MINRANGE;
		var float MAXRANGE;
		var float BESTELEVATION;
		var float MINELEVATION;
		var float MAXELEVATION;
		var float BESTAZIMUTH;
		var float MINAZIMUTH;
		var float MAXAZIMUTH;
		var float BESTROTZ;
		var float MINROTZ;
		var float MAXROTZ;
		var float ROTOFFSETX;
		var float ROTOFFSETY;
		var float ROTOFFSETZ;
		var float TARGETOFFSETX;
		var float TARGETOFFSETY;
		var float TARGETOFFSETZ;
		var float VELOTRANS;
		var float VELOROT;
		var int TRANSLATE;
		var int ROTATE;
		var int COLLISION;

		static void register_(script& s) {
			s.register_member("CCAMSYS.BESTRANGE", &CCAMSYS::BESTRANGE);
			s.register_member("CCAMSYS.MINRANGE", &CCAMSYS::MINRANGE);
			s.register_member("CCAMSYS.MAXRANGE", &CCAMSYS::MAXRANGE);
			s.register_member("CCAMSYS.BESTELEVATION", &CCAMSYS::BESTELEVATION);
			s.register_member("CCAMSYS.MINELEVATION", &CCAMSYS::MINELEVATION);
			s.register_member("CCAMSYS.MAXELEVATION", &CCAMSYS::MAXELEVATION);
			s.register_member("CCAMSYS.BESTAZIMUTH", &CCAMSYS::BESTAZIMUTH);
			s.register_member("CCAMSYS.MINAZIMUTH", &CCAMSYS::MINAZIMUTH);
			s.register_member("CCAMSYS.MAXAZIMUTH", &CCAMSYS::MAXAZIMUTH);
			s.register_member("CCAMSYS.BESTROTZ", &CCAMSYS::BESTROTZ);
			s.register_member("CCAMSYS.MINROTZ", &CCAMSYS::MINROTZ);
			s.register_member("CCAMSYS.MAXROTZ", &CCAMSYS::MAXROTZ);
			s.register_member("CCAMSYS.ROTOFFSETX", &CCAMSYS::ROTOFFSETX);
			s.register_member("CCAMSYS.ROTOFFSETY", &CCAMSYS::ROTOFFSETY);
			s.register_member("CCAMSYS.ROTOFFSETZ", &CCAMSYS::ROTOFFSETZ);
			s.register_member("CCAMSYS.TARGETOFFSETX", &CCAMSYS::TARGETOFFSETX);
			s.register_member("CCAMSYS.TARGETOFFSETY", &CCAMSYS::TARGETOFFSETY);
			s.register_member("CCAMSYS.TARGETOFFSETZ", &CCAMSYS::TARGETOFFSETZ);
			s.register_member("CCAMSYS.VELOTRANS", &CCAMSYS::VELOTRANS);
			s.register_member("CCAMSYS.VELOROT", &CCAMSYS::VELOROT);
			s.register_member("CCAMSYS.TRANSLATE", &CCAMSYS::TRANSLATE);
			s.register_member("CCAMSYS.ROTATE", &CCAMSYS::ROTATE);
			s.register_member("CCAMSYS.COLLISION", &CCAMSYS::COLLISION);
		}
	};

	struct C_MUSICSYS_CFG {
		var float VOLUME;
		var int BITRESOLUTION;
		var int GLOBALREVERBENABLED;
		var int SAMPLERATE;
		var int NUMCHANNELS;
		var int REVERBBUFFERSIZE;

		static void register_(script& s) {
			s.register_member("C_MUSICSYS_CFG.VOLUME", &C_MUSICSYS_CFG::VOLUME);
			s.register_member("C_MUSICSYS_CFG.BITRESOLUTION", &C_MUSICSYS_CFG::BITRESOLUTION);
			s.register_member("C_MUSICSYS_CFG.GLOBALREVERBENABLED", &C_MUSICSYS_CFG::GLOBALREVERBENABLED);
			s.register_member("C_MUSICSYS_CFG.SAMPLERATE", &C_MUSICSYS_CFG::SAMPLERATE);
			s.register_member("C_MUSICSYS_CFG.NUMCHANNELS", &C_MUSICSYS_CFG::NUMCHANNELS);
			s.register_member("C_MUSICSYS_CFG.REVERBBUFFERSIZE", &C_MUSICSYS_CFG::REVERBBUFFERSIZE);
		}
	};

	struct C_MUSICTHEME {
		var string FILE;
		var float VOL;
		var int LOOP;
		var float REVERBMIX;
		var float REVERBTIME;
		var int TRANSTYPE;
		var int TRANSSUBTYPE;

		static void register_(script& s) {
			s.register_member("C_MUSICTHEME.FILE", &C_MUSICTHEME::FILE);
			s.register_member("C_MUSICTHEME.VOL", &C_MUSICTHEME::VOL);
			s.register_member("C_MUSICTHEME.LOOP", &C_MUSICTHEME::LOOP);
			s.register_member("C_MUSICTHEME.REVERBMIX", &C_MUSICTHEME::REVERBMIX);
			s.register_member("C_MUSICTHEME.REVERBTIME", &C_MUSICTHEME::REVERBTIME);
			s.register_member("C_MUSICTHEME.TRANSTYPE", &C_MUSICTHEME::TRANSTYPE);
			s.register_member("C_MUSICTHEME.TRANSSUBTYPE", &C_MUSICTHEME::TRANSSUBTYPE);
		}
	};

	struct C_MUSICJINGLE {
		var string NAME;
		var int LOOP;
		var float VOL;
		var int TRANSSUBTYPE;

		static void register_(script& s) {
			s.register_member("C_MUSICJINGLE.NAME", &C_MUSICJINGLE::NAME);
			s.register_member("C_MUSICJINGLE.LOOP", &C_MUSICJINGLE::LOOP);
			s.register_member("C_MUSICJINGLE.VOL", &C_MUSICJINGLE::VOL);
			s.register_member("C_MUSICJINGLE.TRANSSUBTYPE", &C_MUSICJINGLE::TRANSSUBTYPE);
		}
	};

	struct C_PARTICLEFX {
		var float PPSVALUE;
		var string PPSSCALEKEYS_S;
		var int PPSISLOOPING;
		var int PPSISSMOOTH;
		var float PPSFPS;
		var string PPSCREATEEM_S;
		var float PPSCREATEEMDELAY;
		var string SHPTYPE_S;
		var string SHPFOR_S;
		var string SHPOFFSETVEC_S;
		var string SHPDISTRIBTYPE_S;
		var float SHPDISTRIBWALKSPEED;
		var int SHPISVOLUME;
		var string SHPDIM_S;
		var string SHPMESH_S;
		var int SHPMESHRENDER_B;
		var string SHPSCALEKEYS_S;
		var int SHPSCALEISLOOPING;
		var int SHPSCALEISSMOOTH;
		var float SHPSCALEFPS;
		var string DIRMODE_S;
		var string DIRFOR_S;
		var string DIRMODETARGETFOR_S;
		var string DIRMODETARGETPOS_S;
		var float DIRANGLEHEAD;
		var float DIRANGLEHEADVAR;
		var float DIRANGLEELEV;
		var float DIRANGLEELEVVAR;
		var float VELAVG;
		var float VELVAR;
		var float LSPPARTAVG;
		var float LSPPARTVAR;
		var string FLYGRAVITY_S;
		var int FLYCOLLDET_B;
		var string VISNAME_S;
		var string VISORIENTATION_S;
		var int VISTEXISQUADPOLY;
		var float VISTEXANIFPS;
		var int VISTEXANIISLOOPING;
		var string VISTEXCOLORSTART_S;
		var string VISTEXCOLOREND_S;
		var string VISSIZESTART_S;
		var float VISSIZEENDSCALE;
		var string VISALPHAFUNC_S;
		var float VISALPHASTART;
		var float VISALPHAEND;
		var float TRLFADESPEED;
		var string TRLTEXTURE_S;
		var float TRLWIDTH;
		var float MRKFADESPEED;
		var string MRKTEXTURE_S;
		var float MRKSIZE;
		var string FLOCKMODE;
		var float FLOCKSTRENGTH;
		var int USEEMITTERSFOR;
		var string TIMESTARTEND_S;
		var int M_BISAMBIENTPFX;

		static void register_(script& s) {
			s.register_member("C_PARTICLEFX.PPSVALUE", &C_PARTICLEFX::PPSVALUE);
			s.register_member("C_PARTICLEFX.PPSSCALEKEYS_S", &C_PARTICLEFX::PPSSCALEKEYS_S);
			s.register_member("C_PARTICLEFX.PPSISLOOPING", &C_PARTICLEFX::PPSISLOOPING);
			s.register_member("C_PARTICLEFX.PPSISSMOOTH", &C_PARTICLEFX::PPSISSMOOTH);
			s.register_member("C_PARTICLEFX.PPSFPS", &C_PARTICLEFX::PPSFPS);
			s.register_member("C_PARTICLEFX.PPSCREATEEM_S", &C_PARTICLEFX::PPSCREATEEM_S);
			s.register_member("C_PARTICLEFX.PPSCREATEEMDELAY", &C_PARTICLEFX::PPSCREATEEMDELAY);
			s.register_member("C_PARTICLEFX.SHPTYPE_S", &C_PARTICLEFX::SHPTYPE_S);
			s.register_member("C_PARTICLEFX.SHPFOR_S", &C_PARTICLEFX::SHPFOR_S);
			s.register_member("C_PARTICLEFX.SHPOFFSETVEC_S", &C_PARTICLEFX::SHPOFFSETVEC_S);
			s.register_member("C_PARTICLEFX.SHPDISTRIBTYPE_S", &C_PARTICLEFX::SHPDISTRIBTYPE_S);
			s.register_member("C_PARTICLEFX.SHPDISTRIBWALKSPEED", &C_PARTICLEFX::SHPDISTRIBWALKSPEED);
			s.register_member("C_PARTICLEFX.SHPISVOLUME", &C_PARTICLEFX::SHPISVOLUME);
			s.register_member("C_PARTICLEFX.SHPDIM_S", &C_PARTICLEFX::SHPDIM_S);
			s.register_member("C_PARTICLEFX.SHPMESH_S", &C_PARTICLEFX::SHPMESH_S);
			s.register_member("C_PARTICLEFX.SHPMESHRENDER_B", &C_PARTICLEFX::SHPMESHRENDER_B);
			s.register_member("C_PARTICLEFX.SHPSCALEKEYS_S", &C_PARTICLEFX::SHPSCALEKEYS_S);
			s.register_member("C_PARTICLEFX.SHPSCALEISLOOPING", &C_PARTICLEFX::SHPSCALEISLOOPING);
			s.register_member("C_PARTICLEFX.SHPSCALEISSMOOTH", &C_PARTICLEFX::SHPSCALEISSMOOTH);
			s.register_member("C_PARTICLEFX.SHPSCALEFPS", &C_PARTICLEFX::SHPSCALEFPS);
			s.register_member("C_PARTICLEFX.DIRMODE_S", &C_PARTICLEFX::DIRMODE_S);
			s.register_member("C_PARTICLEFX.DIRFOR_S", &C_PARTICLEFX::DIRFOR_S);
			s.register_member("C_PARTICLEFX.DIRMODETARGETFOR_S", &C_PARTICLEFX::DIRMODETARGETFOR_S);
			s.register_member("C_PARTICLEFX.DIRMODETARGETPOS_S", &C_PARTICLEFX::DIRMODETARGETPOS_S);
			s.register_member("C_PARTICLEFX.DIRANGLEHEAD", &C_PARTICLEFX::DIRANGLEHEAD);
			s.register_member("C_PARTICLEFX.DIRANGLEHEADVAR", &C_PARTICLEFX::DIRANGLEHEADVAR);
			s.register_member("C_PARTICLEFX.DIRANGLEELEV", &C_PARTICLEFX::DIRANGLEELEV);
			s.register_member("C_PARTICLEFX.DIRANGLEELEVVAR", &C_PARTICLEFX::DIRANGLEELEVVAR);
			s.register_member("C_PARTICLEFX.VELAVG", &C_PARTICLEFX::VELAVG);
			s.register_member("C_PARTICLEFX.VELVAR", &C_PARTICLEFX::VELVAR);
			s.register_member("C_PARTICLEFX.LSPPARTAVG", &C_PARTICLEFX::LSPPARTAVG);
			s.register_member("C_PARTICLEFX.LSPPARTVAR", &C_PARTICLEFX::LSPPARTVAR);
			s.register_member("C_PARTICLEFX.FLYGRAVITY_S", &C_PARTICLEFX::FLYGRAVITY_S);
			s.register_member("C_PARTICLEFX.FLYCOLLDET_B", &C_PARTICLEFX::FLYCOLLDET_B);
			s.register_member("C_PARTICLEFX.VISNAME_S", &C_PARTICLEFX::VISNAME_S);
			s.register_member("C_PARTICLEFX.VISORIENTATION_S", &C_PARTICLEFX::VISORIENTATION_S);
			s.register_member("C_PARTICLEFX.VISTEXISQUADPOLY", &C_PARTICLEFX::VISTEXISQUADPOLY);
			s.register_member("C_PARTICLEFX.VISTEXANIFPS", &C_PARTICLEFX::VISTEXANIFPS);
			s.register_member("C_PARTICLEFX.VISTEXANIISLOOPING", &C_PARTICLEFX::VISTEXANIISLOOPING);
			s.register_member("C_PARTICLEFX.VISTEXCOLORSTART_S", &C_PARTICLEFX::VISTEXCOLORSTART_S);
			s.register_member("C_PARTICLEFX.VISTEXCOLOREND_S", &C_PARTICLEFX::VISTEXCOLOREND_S);
			s.register_member("C_PARTICLEFX.VISSIZESTART_S", &C_PARTICLEFX::VISSIZESTART_S);
			s.register_member("C_PARTICLEFX.VISSIZEENDSCALE", &C_PARTICLEFX::VISSIZEENDSCALE);
			s.register_member("C_PARTICLEFX.VISALPHAFUNC_S", &C_PARTICLEFX::VISALPHAFUNC_S);
			s.register_member("C_PARTICLEFX.VISALPHASTART", &C_PARTICLEFX::VISALPHASTART);
			s.register_member("C_PARTICLEFX.VISALPHAEND", &C_PARTICLEFX::VISALPHAEND);
			s.register_member("C_PARTICLEFX.TRLFADESPEED", &C_PARTICLEFX::TRLFADESPEED);
			s.register_member("C_PARTICLEFX.TRLTEXTURE_S", &C_PARTICLEFX::TRLTEXTURE_S);
			s.register_member("C_PARTICLEFX.TRLWIDTH", &C_PARTICLEFX::TRLWIDTH);
			s.register_member("C_PARTICLEFX.MRKFADESPEED", &C_PARTICLEFX::MRKFADESPEED);
			s.register_member("C_PARTICLEFX.MRKTEXTURE_S", &C_PARTICLEFX::MRKTEXTURE_S);
			s.register_member("C_PARTICLEFX.MRKSIZE", &C_PARTICLEFX::MRKSIZE);

			// Gothic 2 only
			if (s.find_symbol_by_name("C_PARTICLEFX.FLOCKMODE") != nullptr) {
				s.register_member("C_PARTICLEFX.FLOCKMODE", &C_PARTICLEFX::FLOCKMODE);
				s.register_member("C_PARTICLEFX.FLOCKSTRENGTH", &C_PARTICLEFX::FLOCKSTRENGTH);
				s.register_member("C_PARTICLEFX.USEEMITTERSFOR", &C_PARTICLEFX::USEEMITTERSFOR);
				s.register_member("C_PARTICLEFX.TIMESTARTEND_S", &C_PARTICLEFX::TIMESTARTEND_S);
				s.register_member("C_PARTICLEFX.M_BISAMBIENTPFX", &C_PARTICLEFX::M_BISAMBIENTPFX);
			}
		}
	};

	struct CFX_BASE {
		var string VISNAME_S;
		var string VISSIZE_S;
		var float VISALPHA;
		var string VISALPHABLENDFUNC_S;
		var float VISTEXANIFPS;
		var int VISTEXANIISLOOPING;
		var string EMTRJMODE_S;
		var string EMTRJORIGINNODE;
		var string EMTRJTARGETNODE;
		var float EMTRJTARGETRANGE;
		var float EMTRJTARGETAZI;
		var float EMTRJTARGETELEV;
		var int EMTRJNUMKEYS;
		var int EMTRJNUMKEYSVAR;
		var float EMTRJANGLEELEVVAR;
		var float EMTRJANGLEHEADVAR;
		var float EMTRJKEYDISTVAR;
		var string EMTRJLOOPMODE_S;
		var string EMTRJEASEFUNC_S;
		var float EMTRJEASEVEL;
		var float EMTRJDYNUPDATEDELAY;
		var int EMTRJDYNUPDATETARGETONLY;
		var string EMFXCREATE_S;
		var string EMFXINVESTORIGIN_S;
		var string EMFXINVESTTARGET_S;
		var float EMFXTRIGGERDELAY;
		var int EMFXCREATEDOWNTRJ;
		var string EMACTIONCOLLDYN_S;
		var string EMACTIONCOLLSTAT_S;
		var string EMFXCOLLSTAT_S;
		var string EMFXCOLLDYN_S;
		var string EMFXCOLLDYNPERC_S;
		var string EMFXCOLLSTATALIGN_S;
		var string EMFXCOLLDYNALIGN_S;
		var float EMFXLIFESPAN;
		var int EMCHECKCOLLISION;
		var int EMADJUSTSHPTOORIGIN;
		var float EMINVESTNEXTKEYDURATION;
		var float EMFLYGRAVITY;
		var string EMSELFROTVEL_S;
		var string USERSTRING[5];
		var string LIGHTPRESETNAME;
		var string SFXID;
		var int SFXISAMBIENT;
		var int SENDASSESSMAGIC;
		var float SECSPERDAMAGE;

		static void register_(script& s) {
			s.register_member("CFX_BASE.VISNAME_S", &CFX_BASE::VISNAME_S);
			s.register_member("CFX_BASE.VISSIZE_S", &CFX_BASE::VISSIZE_S);
			s.register_member("CFX_BASE.VISALPHA", &CFX_BASE::VISALPHA);
			s.register_member("CFX_BASE.VISALPHABLENDFUNC_S", &CFX_BASE::VISALPHABLENDFUNC_S);
			s.register_member("CFX_BASE.VISTEXANIFPS", &CFX_BASE::VISTEXANIFPS);
			s.register_member("CFX_BASE.VISTEXANIISLOOPING", &CFX_BASE::VISTEXANIISLOOPING);
			s.register_member("CFX_BASE.EMTRJMODE_S", &CFX_BASE::EMTRJMODE_S);
			s.register_member("CFX_BASE.EMTRJORIGINNODE", &CFX_BASE::EMTRJORIGINNODE);
			s.register_member("CFX_BASE.EMTRJTARGETNODE", &CFX_BASE::EMTRJTARGETNODE);
			s.register_member("CFX_BASE.EMTRJTARGETRANGE", &CFX_BASE::EMTRJTARGETRANGE);
			s.register_member("CFX_BASE.EMTRJTARGETAZI", &CFX_BASE::EMTRJTARGETAZI);
			s.register_member("CFX_BASE.EMTRJTARGETELEV", &CFX_BASE::EMTRJTARGETELEV);
			s.register_member("CFX_BASE.EMTRJNUMKEYS", &CFX_BASE::EMTRJNUMKEYS);
			s.register_member("CFX_BASE.EMTRJNUMKEYSVAR", &CFX_BASE::EMTRJNUMKEYSVAR);
			s.register_member("CFX_BASE.EMTRJANGLEELEVVAR", &CFX_BASE::EMTRJANGLEELEVVAR);
			s.register_member("CFX_BASE.EMTRJANGLEHEADVAR", &CFX_BASE::EMTRJANGLEHEADVAR);
			s.register_member("CFX_BASE.EMTRJKEYDISTVAR", &CFX_BASE::EMTRJKEYDISTVAR);
			s.register_member("CFX_BASE.EMTRJLOOPMODE_S", &CFX_BASE::EMTRJLOOPMODE_S);
			s.register_member("CFX_BASE.EMTRJEASEFUNC_S", &CFX_BASE::EMTRJEASEFUNC_S);
			s.register_member("CFX_BASE.EMTRJEASEVEL", &CFX_BASE::EMTRJEASEVEL);
			s.register_member("CFX_BASE.EMTRJDYNUPDATEDELAY", &CFX_BASE::EMTRJDYNUPDATEDELAY);
			s.register_member("CFX_BASE.EMTRJDYNUPDATETARGETONLY", &CFX_BASE::EMTRJDYNUPDATETARGETONLY);
			s.register_member("CFX_BASE.EMFXCREATE_S", &CFX_BASE::EMFXCREATE_S);
			s.register_member("CFX_BASE.EMFXINVESTORIGIN_S", &CFX_BASE::EMFXINVESTORIGIN_S);
			s.register_member("CFX_BASE.EMFXINVESTTARGET_S", &CFX_BASE::EMFXINVESTTARGET_S);
			s.register_member("CFX_BASE.EMFXTRIGGERDELAY", &CFX_BASE::EMFXTRIGGERDELAY);
			s.register_member("CFX_BASE.EMFXCREATEDOWNTRJ", &CFX_BASE::EMFXCREATEDOWNTRJ);
			s.register_member("CFX_BASE.EMACTIONCOLLDYN_S", &CFX_BASE::EMACTIONCOLLDYN_S);
			s.register_member("CFX_BASE.EMACTIONCOLLSTAT_S", &CFX_BASE::EMACTIONCOLLSTAT_S);
			s.register_member("CFX_BASE.EMFXCOLLSTAT_S", &CFX_BASE::EMFXCOLLSTAT_S);
			s.register_member("CFX_BASE.EMFXCOLLDYN_S", &CFX_BASE::EMFXCOLLDYN_S);
			s.register_member("CFX_BASE.EMFXCOLLSTATALIGN_S", &CFX_BASE::EMFXCOLLSTATALIGN_S);
			s.register_member("CFX_BASE.EMFXCOLLDYNALIGN_S", &CFX_BASE::EMFXCOLLDYNALIGN_S);
			s.register_member("CFX_BASE.EMFXLIFESPAN", &CFX_BASE::EMFXLIFESPAN);
			s.register_member("CFX_BASE.EMCHECKCOLLISION", &CFX_BASE::EMCHECKCOLLISION);
			s.register_member("CFX_BASE.EMADJUSTSHPTOORIGIN", &CFX_BASE::EMADJUSTSHPTOORIGIN);
			s.register_member("CFX_BASE.EMINVESTNEXTKEYDURATION", &CFX_BASE::EMINVESTNEXTKEYDURATION);
			s.register_member("CFX_BASE.EMFLYGRAVITY", &CFX_BASE::EMFLYGRAVITY);
			s.register_member("CFX_BASE.EMSELFROTVEL_S", &CFX_BASE::EMSELFROTVEL_S);
			s.register_member("CFX_BASE.USERSTRING", &CFX_BASE::USERSTRING);
			s.register_member("CFX_BASE.LIGHTPRESETNAME", &CFX_BASE::LIGHTPRESETNAME);
			s.register_member("CFX_BASE.SFXID", &CFX_BASE::SFXID);
			s.register_member("CFX_BASE.SFXISAMBIENT", &CFX_BASE::SFXISAMBIENT);
			s.register_member("CFX_BASE.SENDASSESSMAGIC", &CFX_BASE::SENDASSESSMAGIC);
			s.register_member("CFX_BASE.SECSPERDAMAGE", &CFX_BASE::SECSPERDAMAGE);

			// Gothic 2 only
			if (s.find_symbol_by_name("CFX_BASE.EMFXCOLLDYNPERC_S") != nullptr)
				s.register_member("CFX_BASE.EMFXCOLLDYNPERC_S", &CFX_BASE::EMFXCOLLDYNPERC_S);
		}
	};

	struct C_PARTICLEFXEMITKEY {
		var string VISNAME_S;
		var float VISSIZESCALE;
		var float SCALEDURATION;
		var float PFX_PPSVALUE;
		var int PFX_PPSISSMOOTHCHG;
		var int PFX_PPSISLOOPINGCHG;
		var float PFX_SCTIME;
		var string PFX_FLYGRAVITY_S;
		var string PFX_SHPDIM_S;
		var int PFX_SHPISVOLUMECHG;
		var float PFX_SHPSCALEFPS;
		var float PFX_SHPDISTRIBWALKSPEED;
		var string PFX_SHPOFFSETVEC_S;
		var string PFX_SHPDISTRIBTYPE_S;
		var string PFX_DIRMODE_S;
		var string PFX_DIRFOR_S;
		var string PFX_DIRMODETARGETFOR_S;
		var string PFX_DIRMODETARGETPOS_S;
		var float PFX_VELAVG;
		var float PFX_LSPPARTAVG;
		var float PFX_VISALPHASTART;
		var string LIGHTPRESETNAME;
		var float LIGHTRANGE;
		var string SFXID;
		var int SFXISAMBIENT;
		var string EMCREATEFXID;
		var float EMFLYGRAVITY;
		var string EMSELFROTVEL_S;
		var string EMTRJMODE_S;
		var float EMTRJEASEVEL;
		var int EMCHECKCOLLISION;
		var float EMFXLIFESPAN;

		static void register_(script& s) {
			s.register_member("C_PARTICLEFXEMITKEY.VISNAME_S", &C_PARTICLEFXEMITKEY::VISNAME_S);
			s.register_member("C_PARTICLEFXEMITKEY.VISSIZESCALE", &C_PARTICLEFXEMITKEY::VISSIZESCALE);
			s.register_member("C_PARTICLEFXEMITKEY.SCALEDURATION", &C_PARTICLEFXEMITKEY::SCALEDURATION);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_PPSVALUE", &C_PARTICLEFXEMITKEY::PFX_PPSVALUE);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_PPSISSMOOTHCHG", &C_PARTICLEFXEMITKEY::PFX_PPSISSMOOTHCHG);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_PPSISLOOPINGCHG", &C_PARTICLEFXEMITKEY::PFX_PPSISLOOPINGCHG);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_SCTIME", &C_PARTICLEFXEMITKEY::PFX_SCTIME);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_FLYGRAVITY_S", &C_PARTICLEFXEMITKEY::PFX_FLYGRAVITY_S);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_SHPDIM_S", &C_PARTICLEFXEMITKEY::PFX_SHPDIM_S);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_SHPISVOLUMECHG", &C_PARTICLEFXEMITKEY::PFX_SHPISVOLUMECHG);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_SHPSCALEFPS", &C_PARTICLEFXEMITKEY::PFX_SHPSCALEFPS);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_SHPDISTRIBWALKSPEED",
			                  &C_PARTICLEFXEMITKEY::PFX_SHPDISTRIBWALKSPEED);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_SHPOFFSETVEC_S", &C_PARTICLEFXEMITKEY::PFX_SHPOFFSETVEC_S);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_SHPDISTRIBTYPE_S", &C_PARTICLEFXEMITKEY::PFX_SHPDISTRIBTYPE_S);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_DIRMODE_S", &C_PARTICLEFXEMITKEY::PFX_DIRMODE_S);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_DIRFOR_S", &C_PARTICLEFXEMITKEY::PFX_DIRFOR_S);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_DIRMODETARGETFOR_S",
			                  &C_PARTICLEFXEMITKEY::PFX_DIRMODETARGETFOR_S);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_DIRMODETARGETPOS_S",
			                  &C_PARTICLEFXEMITKEY::PFX_DIRMODETARGETPOS_S);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_VELAVG", &C_PARTICLEFXEMITKEY::PFX_VELAVG);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_LSPPARTAVG", &C_PARTICLEFXEMITKEY::PFX_LSPPARTAVG);
			s.register_member("C_PARTICLEFXEMITKEY.PFX_VISALPHASTART", &C_PARTICLEFXEMITKEY::PFX_VISALPHASTART);
			s.register_member("C_PARTICLEFXEMITKEY.LIGHTPRESETNAME", &C_PARTICLEFXEMITKEY::LIGHTPRESETNAME);
			s.register_member("C_PARTICLEFXEMITKEY.LIGHTRANGE", &C_PARTICLEFXEMITKEY::LIGHTRANGE);
			s.register_member("C_PARTICLEFXEMITKEY.SFXID", &C_PARTICLEFXEMITKEY::SFXID);
			s.register_member("C_PARTICLEFXEMITKEY.SFXISAMBIENT", &C_PARTICLEFXEMITKEY::SFXISAMBIENT);
			s.register_member("C_PARTICLEFXEMITKEY.EMCREATEFXID", &C_PARTICLEFXEMITKEY::EMCREATEFXID);
			s.register_member("C_PARTICLEFXEMITKEY.EMFLYGRAVITY", &C_PARTICLEFXEMITKEY::EMFLYGRAVITY);
			s.register_member("C_PARTICLEFXEMITKEY.EMSELFROTVEL_S", &C_PARTICLEFXEMITKEY::EMSELFROTVEL_S);
			s.register_member("C_PARTICLEFXEMITKEY.EMTRJMODE_S", &C_PARTICLEFXEMITKEY::EMTRJMODE_S);
			s.register_member("C_PARTICLEFXEMITKEY.EMTRJEASEVEL", &C_PARTICLEFXEMITKEY::EMTRJEASEVEL);
			s.register_member("C_PARTICLEFXEMITKEY.EMCHECKCOLLISION", &C_PARTICLEFXEMITKEY::EMCHECKCOLLISION);
			s.register_member("C_PARTICLEFXEMITKEY.EMFXLIFESPAN", &C_PARTICLEFXEMITKEY::EMFXLIFESPAN);
		}
	};

	struct C_FIGHTAI {
		var int MOVE[6];

		static void register_(script& s) {
			s.register_member("C_FIGHTAI.MOVE", &C_FIGHTAI::MOVE);
		}
	};

	struct C_SFX {
		var string FILE;
		var int PITCHOFF;
		var int PITCHVAR;
		var int VOL;
		var int LOOP;
		var int LOOPSTARTOFFSET;
		var int LOOPENDOFFSET;
		var float REVERBLEVEL;
		var string PFXNAME;

		static void register_(script& s) {
			s.register_member("C_SFX.FILE", &C_SFX::FILE);
			s.register_member("C_SFX.PITCHOFF", &C_SFX::PITCHOFF);
			s.register_member("C_SFX.PITCHVAR", &C_SFX::PITCHVAR);
			s.register_member("C_SFX.VOL", &C_SFX::VOL);
			s.register_member("C_SFX.LOOP", &C_SFX::LOOP);
			s.register_member("C_SFX.LOOPSTARTOFFSET", &C_SFX::LOOPSTARTOFFSET);
			s.register_member("C_SFX.LOOPENDOFFSET", &C_SFX::LOOPENDOFFSET);
			s.register_member("C_SFX.REVERBLEVEL", &C_SFX::REVERBLEVEL);
			s.register_member("C_SFX.PFXNAME", &C_SFX::PFXNAME);
		}
	};

	struct C_SNDSYS_CFG {
		var float VOLUME;
		var int BITRESOLUTION;
		var int SAMPLERATE;
		var int USESTEREO;
		var int NUMSFXCHANNELS;
		var string USED3DPROVIDERNAME;

		static void register_(script& s) {
			s.register_member("C_SNDSYS_CFG.VOLUME", &C_SNDSYS_CFG::VOLUME);
			s.register_member("C_SNDSYS_CFG.BITRESOLUTION", &C_SNDSYS_CFG::BITRESOLUTION);
			s.register_member("C_SNDSYS_CFG.SAMPLERATE", &C_SNDSYS_CFG::SAMPLERATE);
			s.register_member("C_SNDSYS_CFG.USESTEREO", &C_SNDSYS_CFG::USESTEREO);
			s.register_member("C_SNDSYS_CFG.NUMSFXCHANNELS", &C_SNDSYS_CFG::NUMSFXCHANNELS);
			s.register_member("C_SNDSYS_CFG.USED3DPROVIDERNAME", &C_SNDSYS_CFG::USED3DPROVIDERNAME);
		}
	};

#define IF_SYM_EXIST(sym, d) do {if (s.find_symbol_by_name(sym) != nullptr) {d;}} while (false)

	void register_all_script_classes(script& s) {
		IF_SYM_EXIST("C_GILVALUES", C_GILVALUES::register_(s));
		IF_SYM_EXIST("C_NPC", C_NPC::register_(s));
		IF_SYM_EXIST("C_MISSION", C_MISSION::register_(s));
		IF_SYM_EXIST("C_ITEM", C_ITEM::register_(s));
		IF_SYM_EXIST("C_FOCUS", C_FOCUS::register_(s));
		IF_SYM_EXIST("C_INFO", C_INFO::register_(s));
		IF_SYM_EXIST("C_ITEMREACT", C_ITEMREACT::register_(s));
		IF_SYM_EXIST("C_SPELL", C_SPELL::register_(s));
		IF_SYM_EXIST("C_SVM", C_SVM::register_(s));
		IF_SYM_EXIST("C_MENU", C_MENU::register_(s));
		IF_SYM_EXIST("C_MENU_ITEM", C_MENU_ITEM::register_(s));
		IF_SYM_EXIST("CCAMSYS", CCAMSYS::register_(s));
		IF_SYM_EXIST("C_MUSICSYS_CFG", C_MUSICSYS_CFG::register_(s));
		IF_SYM_EXIST("C_MUSICTHEME", C_MUSICTHEME::register_(s));
		IF_SYM_EXIST("C_MUSICJINGLE", C_MUSICJINGLE::register_(s));
		IF_SYM_EXIST("C_PARTICLEFX", C_PARTICLEFX::register_(s));
		IF_SYM_EXIST("CFX_BASE", CFX_BASE::register_(s));
		IF_SYM_EXIST("C_PARTICLEFXEMITKEY", C_PARTICLEFXEMITKEY::register_(s));
		IF_SYM_EXIST("C_FIGHTAI", C_FIGHTAI::register_(s));
		IF_SYM_EXIST("C_SFX", C_SFX::register_(s));
		IF_SYM_EXIST("C_SNDSYS_CFG", C_SNDSYS_CFG::register_(s));
	}

#undef IF_SYM_EXIST
} // namespace phoenix::daedalus

#undef var
#undef string
#undef func
